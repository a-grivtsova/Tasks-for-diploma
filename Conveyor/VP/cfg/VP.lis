    1          PROGR PLANT
    2          {
    3          TACT 50;
    4          CONST ON 1;
    5          CONST OFF 0;
    6          CONST SensorDelay 20; /*2 second*/
    7          CONST RemovingDelay 10; /*1 second*/
    8          CONST Norm 01;
    9          CONST PresenceSensorWrong 00;
   10          CONST ColorSensorWrong 10;
   11          
   12          ENUM
   13          {		
   14          	SCM2VP_PUT_BOXES_ON_CONVEYOR,
   15          	SCM2VP_BROKEN_PRESENCE_SENSOR,
   16          	SCM2VP_BROKEN_COLOR_SENSORS,
   17          	SCM2VP_FINISH_VERIFICATION
   18          };
   19          
   20          FUNCTION INT GetMessageFromScenariousBlock(VOID);
   21          FUNCTION INT GetMessageCodeFromScenariousBlock(VOID);
   22          FUNCTION INT Random( VOID );
   23          	
   24          INPUT  LOG_VP_INPUT_PORT  0 0 8; 
   25          OUTPUT LOG_VP_OUTPUT_PORT 1 0 8;
   26          	
   27          PROC Init
   28          {
   29          	LOG O_BOX_UNDER_SENSOR = {LOG_VP_OUTPUT_PORT[1]} FOR ALL;
   30          	LOG O_BOX_RED = {LOG_VP_OUTPUT_PORT[1]} FOR ALL;
   31          	LOG O_BOX_GREEN = {LOG_VP_OUTPUT_PORT[1]} FOR ALL;
   32          		
   33          	LOG I_TURN_ON_MAIN_CONVEYOR = {LOG_VP_INPUT_PORT[1]} FOR ALL;
   34          	LOG I_TURN_ON_SIDE_CONVEYOR = {LOG_VP_INPUT_PORT[1]} FOR ALL;
   35          	LOG I_REMOVE_BOX = {LOG_VP_INPUT_PORT[1]} FOR ALL;
   36          		
   37          	STATE Start
   38          	{ 			
   39          		START PROC ReceiveSCMOutputMsg;
   40          		STOP; 
   41          	}
   42          }
   43          
   44          PROC ReceiveSCMOutputMsg
   45          {
   46          	LOG Flag FOR ALL; 
   47          	INT SCMsgCode LOCAL;
   48          
   49          	STATE Start
   50          	{
   51          		IF (GetMessageFromScenariousBlock()) 
   52          		{
   53          			SCMsgCode = GetMessageCodeFromScenariousBlock();
   54          			SWITCH (SCMsgCode)
   55          			{
   56          				CASE SCM2VP_PUT_BOXES_ON_CONVEYOR:
   57          					IF(PROC PutBoxesOnConveyor SET STATE PASSIVE)
   58          					{
   59          						Flag = Norm;
   60          						START PROC PutBoxesOnConveyor;	
   61          					}
   62          					BREAK;		
   63          				CASE SCM2VP_BROKEN_PRESENCE_SENSOR:
   64          					Flag = PresenceSensorWrong;
   65          					BREAK;
   66          				CASE SCM2VP_BROKEN_COLOR_SENSORS:
   67          					Flag = ColorSensorWrong;
   68          					BREAK;
   69          				CASE SCM2VP_FINISH_VERIFICATION:
   70          					STOP PROC PutBoxesOnConveyor;	
   71          					STOP;
   72          					BREAK;
   73          			}
   74          		}
   75          		LOOP;
   76          	}
   77          }
   78          
   79          PROC PutBoxesOnConveyor
   80          {
   81          	FROM PROC ReceiveSCMOutputMsg Flag;
   82          	FROM PROC Init O_BOX_UNDER_SENSOR, O_BOX_RED, 
   83          	O_BOX_GREEN, I_TURN_ON_MAIN_CONVEYOR, 
   84          	I_TURN_ON_SIDE_CONVEYOR, I_REMOVE_BOX;
   85          	INT time LOCAL;
   86          	INT color LOCAL;
   87          
   88          	STATE Start
   89          	{
   90          		O_BOX_UNDER_SENSOR = OFF;
   91          		O_BOX_RED = OFF;
   92          		O_BOX_GREEN = OFF;
   93          		SET NEXT;
   94          	}
   95          	
   96          	STATE Randomize /*Generate time between boxes and color*/
   97          	{
   98          		time = Random();
   99          		color = Random();
  100          		SET NEXT;
  101          	}
  102          	
  103          	STATE ColorChoice 
  104          	{
  105          		IF (color >= 20 && color <= 35) SET STATE GreenBoxMode;
  106          		ELSE IF (color > 35 && color <= 50) SET STATE RedBoxMode;	
  107          		ELSE
  108          		{
  109          			IF(Flag == Norm) 
  110          				SET STATE BlueBoxMode; 
  111          			ELSE SET STATE Randomize;
  112          		}
  113          	}	
  114          	
  115          	STATE BlueBoxMode
  116          	{
  117          		TIMEOUT time
  118          		{
  119          			O_BOX_UNDER_SENSOR = ON;
  120          			SET NEXT;
  121          		}
  122          	}
  123          	
  124          	STATE RemovingOfBlueBox
  125          	{
  126          		TIMEOUT RemovingDelay
  127          		{
  128          			IF(I_REMOVE_BOX && !I_TURN_ON_MAIN_CONVEYOR && !I_TURN_ON_SIDE_CONVEYOR)
  129          				SET STATE Start;
  130          		}
  131          	}
  132          		
  133          	STATE GreenBoxMode /*Turn on sensor green box*/
  134          	{
  135          		TIMEOUT time
  136          		{
  137          			IF((Flag == Norm) || (Flag == ColorSensorWrong)) 
  138          				O_BOX_UNDER_SENSOR = ON;
  139          			IF(Flag == ColorSensorWrong)
  140          				O_BOX_RED = ON;
  141          			O_BOX_GREEN = ON;
  142          			SET STATE PassingSensor;
  143          		}
  144          	}
  145          	
  146          	STATE RedBoxMode /*Turn on sensor red box*/
  147          	{
  148          		TIMEOUT time
  149          		{
  150          			IF((Flag == Norm) || (Flag == ColorSensorWrong))
  151          				O_BOX_UNDER_SENSOR = ON;
  152          			IF(Flag == ColorSensorWrong)
  153          				O_BOX_GREEN = ON;
  154          			O_BOX_RED = ON;
  155          			SET STATE PassingSensor;
  156          		}
  157          	}
  158          	
  159          	STATE PassingSensor
  160          	{
  161          		TIMEOUT SensorDelay 
  162          			SET STATE Start;
  163          	}
  164          }
  165          }

%RCSL-I-SUMMARY, Completed with 0 error(s).
%RCSL-I-SUMMARY, Completed with 0 warning(s).

 %RCSL-I-SUMMARY, Completed with 0 error(s).