PROGR VERIFIER
{
	TACT 50;
	CONST ON 1;
	CONST OFF 0;
	CONST AlgorithmDelay 40; /*2 сек*/
	CONST TestIdling 100;

	/*Набор команд для VERIFIER(блок верификации)*/
	ENUM 
	{
		SCM2VM_TEST_NORMAL_TURN_ON,
		SCM2VM_TEST_NORMAL_TURN_OFF, 
		SCM2VM_FINISH_VERIFICATION
	};

	/*Набор команд для DISPATCHER(блок управления сценарием) от VERIFIER(блока верификации)*/
	ENUM
	{
		VM2SCM_START_VERIFICATION,
		VM2SCM_NEXT_TEST
	};

	/*Набор Команд для GUI */
	ENUM
	{
		VM2GUI_TEST_PASSED_NORMAL_TURN_ON, 
		VM2GUI_TEST_PASSED_NORMAL_TURN_OFF,
		VM2GUI_TEST_FAILED_NORMAL_TURN_ON,
		VM2GUI_TEST_FAILED_NORMAL_TURN_OFF,
		VM2GUI_TEST_NOT_ACTIVE_NORMAL_TURN_ON,
		VM2GUI_TEST_NOT_ACTIVE_NORMAL_TURN_OFF,
		VM2GUI_START_TEST_TURN_ON,
		VM2GUI_START_TEST_TURN_OFF,
		VM2GUI_END_VERIFICATION
	};
	
	FUNCTION INT SendMsgSCMCode(INT);
	FUNCTION INT SendMsgGUICode(INT);
	FUNCTION INT GetNextMsgFromSCM(VOID);
	FUNCTION INT GetMsgCodeFromSCM(VOID);

	INPUT  LOG_VERIFIER_INPUT_PORT 0 0 8; /* имя, базовый адрес, доп. адр. порта, 8бит */
	INPUT  LOG_VERIFIER_OUTPUT_PORT  0 1 8; /* имя, базовый адрес, доп. адр. порта, 8бит */
	
	PROC Init
	{	
		LOG HELLO_WORLD = {LOG_VERIFIER_OUTPUT_PORT[1]} FOR ALL;
				
		STATE Start 
		{	
			SendMsgSCMCode(VM2SCM_START_VERIFICATION); 	
			START PROC ReceiveSCMOutputMsg;
			STOP;
		}
	} 
	
	PROC ReceiveSCMOutputMsg
	{  
		INT SCMsgCode LOCAL;
		STATE Start
		{
			/*  читаем код и параметр события из кольцевого буфера в структуру */
			IF (GetNextMsgFromSCM()) 
			{
				SCMsgCode = GetMsgCodeFromSCM();
				SWITCH (SCMsgCode) 				
				{
				
					CASE SCM2VM_TEST_NORMAL_TURN_ON:					
						SendMsgGUICode(VM2GUI_START_TEST_TURN_ON);
						START PROC Terminator; 	
						BREAK;
					CASE SCM2VM_FINISH_VERIFICATION:
						SendMsgGUICode(VM2GUI_END_VERIFICATION);
						STOP PROC Terminator; 
						STOP;
						BREAK;
				}
			}
			LOOP;
		}
	}
	
	PROC Terminator
	{
		STATE Idling
		{
			TIMEOUT TestIdling SET NEXT;
		}
		STATE Report
		{			
			SendMsgGUICode(VM2GUI_TEST_PASSED_NORMAL_TURN_ON);
			STOP;
		}
	
	}

}



