PROGR VERIFIER
{
	TACT 50;
	CONST PCyclesDelay 198; /*19.8 sec*/
	CONST KCyclesDelay 148; /*14.8 sec*/
	CONST AlgorithmDelay 10; /*1 sec*/
	CONST Active 1;
	CONST Error 0;

	/*List of commands for VM (Verification Module)*/
	ENUM 
	{
		SCM2VM_TEST_RUN_CARS,
		SCM2VM_TEST_NO_CARS,
		SCM2VM_TEST_RUN_WRONG_CAR, 
		SCM2VM_TEST_COMPLETED,
		SCM2VM_FINISH_VERIFICATION
	};

	/*List of commands for SCM (Script Control Module) from VM (Verification Module)*/ 
	ENUM
	{
		VM2SCM_START_VERIFICATION
	};

	/*List of commands for GUI*/
	ENUM
	{
		VM2GUI_START_TEST_RUN_CARS,
		VM2GUI_START_TEST_NO_CARS,
		VM2GUI_START_TEST_RUN_WRONG_CAR,
		VM2GUI_TEST_PASSED_NO_CARS,
		VM2GUI_TEST_PASSED_NORMAL_OPEN_ROAD_DELAY, 
		VM2GUI_TEST_PASSED_NORMAL_CLOSE_ROAD_DELAY,
		VM2GUI_TEST_FAILED_NO_CARS,
		VM2GUI_TEST_FAILED_NORMAL_OPEN_ROAD_DELAY,
		VM2GUI_TEST_FAILED_NORMAL_CLOSE_ROAD_DELAY,
		VM2GUI_END_VERIFICATION
	};
	
	FUNCTION INT SendMsgSCMCode(INT);
	FUNCTION INT SendMsgGUICode(INT);
	FUNCTION INT GetNextMsgFromSCM(VOID);
	FUNCTION INT GetMsgCodeFromSCM(VOID);

	INPUT  LOG_CA_INPUT_PORT 0 0 8; /*name, base address, add. addr port, 8bit*/
	INPUT  LOG_CA_OUTPUT_PORT  0 1 8; /*name, base address, add. addr port, 8bit*/
	
	PROC Init
	{	
		LOG I_CAR_NEAR_CROSSROAD = {LOG_CA_INPUT_PORT[1]} FOR ALL;
		LOG I_SWITCH_TRAFFIC_LIGHT = {LOG_CA_OUTPUT_PORT[1]} FOR ALL;
				
		STATE Start 
		{	
			SendMsgSCMCode(VM2SCM_START_VERIFICATION); 	
			START PROC ReceiveSCMOutputMsg;
			STOP;
		}
	} 
	
	PROC ReceiveSCMOutputMsg
	{  
		INT SCMsgCode LOCAL; 
		STATE Start
		{
			/*Read code and event parameter from ring buffer into the structure*/
			IF(GetNextMsgFromSCM()) 
			{
				SCMsgCode = GetMsgCodeFromSCM();
				SWITCH (SCMsgCode) 				
				{						
					CASE SCM2VM_TEST_NO_CARS:
						SendMsgGUICode(VM2GUI_START_TEST_NO_CARS);
						START PROC NoCarsControl;
						START PROC OpenRoadDelayControl;						
						START PROC CloseRoadDelayControl;
						BREAK;
						
					CASE SCM2VM_TEST_RUN_CARS:
						SendMsgGUICode(VM2GUI_START_TEST_RUN_CARS);
						START PROC ErrorControlForOpenRoad;
						START PROC ErrorControlForCloseRoad;
						BREAK;
						
					CASE SCM2VM_TEST_RUN_WRONG_CAR:
						SendMsgGUICode(VM2GUI_START_TEST_RUN_WRONG_CAR);
						START PROC ErrorControlForOpenRoad;
						START PROC ErrorControlForCloseRoad;					
						BREAK;
					
					CASE SCM2VM_TEST_COMPLETED:
						START PROC Terminator; 
						BREAK;

					CASE SCM2VM_FINISH_VERIFICATION:
						SendMsgGUICode(VM2GUI_END_VERIFICATION);
						STOP PROC OpenRoadDelayControl;	
						STOP PROC CloseRoadDelayControl;
						STOP PROC Terminator; 
						STOP;
						BREAK;
				}
			}
			LOOP;
		}
	}
	
	PROC Terminator
	{
		STATE Report
		{			
			/*OpenRoadDelayControl*/
			IF(PROC ErrorControlForOpenRoad SET STATE ACTIVE)
			{
				SendMsgGUICode(VM2GUI_TEST_PASSED_NORMAL_OPEN_ROAD_DELAY);
			}
			IF(PROC ErrorControlForOpenRoad SET STATE ERROR)
			{
				SendMsgGUICode(VM2GUI_TEST_FAILED_NORMAL_OPEN_ROAD_DELAY);
			}
			
			STOP PROC ErrorControlForOpenRoad;
			
			/*CloseRoadDelayControl*/		
			IF(PROC ErrorControlForCloseRoad SET STATE ACTIVE)
			{
				SendMsgGUICode(VM2GUI_TEST_PASSED_NORMAL_CLOSE_ROAD_DELAY);
			}

			IF(PROC ErrorControlForCloseRoad SET STATE ERROR)
			{
				SendMsgGUICode(VM2GUI_TEST_FAILED_NORMAL_CLOSE_ROAD_DELAY);
			}
			
			STOP PROC ErrorControlForCloseRoad;
			
			/*NoCarsControl*/		
			IF(PROC NoCarsControl SET STATE ACTIVE)
			{
				SendMsgGUICode(VM2GUI_TEST_PASSED_NO_CARS);
			}

			IF(PROC NoCarsControl SET STATE ERROR) 
			{
				SendMsgGUICode(VM2GUI_TEST_FAILED_NO_CARS);
			}
			
			STOP PROC NoCarsControl;
			STOP;
		}	
	}
	
/*Checking requirement: A traffic light starts regulation only if*/
/*there is a car on the side of a country road*/	
PROC NoCarsControl
{
	FROM PROC Init I_CAR_NEAR_CROSSROAD, I_SWITCH_TRAFFIC_LIGHT;
	
	STATE Start
	{
		IF(!I_CAR_NEAR_CROSSROAD && I_SWITCH_TRAFFIC_LIGHT)
			ERROR;
		LOOP;
	}	
}

/*Checking requirement: If car appeared on the side of country road, 
/*then the road will open exactly after P measures*/
	PROC OpenRoadDelayControl
	{
		FROM PROC Init I_CAR_NEAR_CROSSROAD, I_SWITCH_TRAFFIC_LIGHT;
		LOG flag FOR ALL;		
					
		STATE Start
		{
			flag = Active;
			SET NEXT;
		}
		
		STATE WaitingOfCar /*Wait to switch the sensor*/
		{
			IF(I_CAR_NEAR_CROSSROAD && !I_SWITCH_TRAFFIC_LIGHT) 
				SET NEXT;
		}		

		STATE WaitingPCycles /*Wait P cycles*/
		{
			IF(I_SWITCH_TRAFFIC_LIGHT) 
				flag = Error;
			TIMEOUT PCyclesDelay SET NEXT;
		}
		
		STATE PCyclesControl /*Check state of sensor after P cycles*/
		{
			IF(I_SWITCH_TRAFFIC_LIGHT) 
				SET STATE Start;
			TIMEOUT AlgorithmDelay
			{
				flag = Error;
				SET STATE Start;
			}
		}	
	}	
	
	PROC ErrorControlForOpenRoad
	{
		FROM PROC OpenRoadDelayControl flag;		
	
		STATE Start
		{
			IF(flag == Error)
				ERROR;
			LOOP;
		}
	}

/*Checking requirement: Between opening and closing of country road
/*should pass exactly K cycles*/
	PROC CloseRoadDelayControl
	{
		FROM PROC Init I_CAR_NEAR_CROSSROAD, I_SWITCH_TRAFFIC_LIGHT;
		LOG flag FOR ALL;
		
		STATE Start
		{
			flag = Active;
			SET NEXT;
		}

		STATE WaitingOfSwitching /*Wait until traffic light switches*/
		{
			IF(I_CAR_NEAR_CROSSROAD && I_SWITCH_TRAFFIC_LIGHT) 
				SET NEXT;
		}
		
		STATE WaitingKCycles /*Wait K cycles*/
		{
			IF(!I_SWITCH_TRAFFIC_LIGHT) 
				flag = Error;
			TIMEOUT KCyclesDelay SET NEXT;
		}
		
		STATE KCyclesControl /*Check state of sensor after K cycles*/
		{
			IF(!I_SWITCH_TRAFFIC_LIGHT) 
				SET STATE Start;
			TIMEOUT AlgorithmDelay
			{
				flag = Error;
				SET STATE Start;
			}
		}
	}

	PROC ErrorControlForCloseRoad
	{
		FROM PROC CloseRoadDelayControl flag;		
	
		STATE Start
		{
			IF(flag == Error)
				ERROR;
			LOOP;
		}
	}
}